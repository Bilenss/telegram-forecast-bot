"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å PocketOption
–ó–∞–ø—É—Å–∫: python -m app.utils.po_diagnostic
"""

import asyncio
import logging
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from app.data_sources.pocketoption_scraper import fetch_po_ohlc_async
from app.config import PO_ENABLE_SCRAPE, PO_PROXY, PO_BROWSER_ORDER

# NEW: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CompositeFetcher
from app.data_sources.fetchers import CompositeFetcher  # NEW

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_pocketoption_connection():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PocketOption"""

    print("="*60)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê POCKETOPTION")
    print("="*60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"   PO_ENABLE_SCRAPE: {PO_ENABLE_SCRAPE}")
    print(f"   PO_PROXY: {'Configured' if PO_PROXY else 'Not configured'}")
    print(f"   PO_BROWSER_ORDER: {PO_BROWSER_ORDER}")

    if not PO_ENABLE_SCRAPE:
        print("\n‚ùå PO_ENABLE_SCRAPE=0 - —Å–∫—Ä–∞–ø–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PO_ENABLE_SCRAPE=1 –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False

    # 2. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    print("\n2Ô∏è‚É£ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•:")

    test_cases = [
        ("EURUSD", "1m", False),  # FIN –ø–∞—Ä–∞
        ("EURUSD", "5m", False),  # –î—Ä—É–≥–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
        ("EURUSD", "1m", True),   # OTC –ø–∞—Ä–∞
    ]

    results = []

    for symbol, timeframe, otc in test_cases:
        try:
            print(f"\n   –¢–µ—Å—Ç–∏—Ä—É—é {symbol} {timeframe} (OTC={otc})...")
            start_time = datetime.now()

            df = await fetch_po_ohlc_async(
                symbol=symbol,
                timeframe=timeframe,
                otc=otc
            )

            elapsed = (datetime.now() - start_time).total_seconds()

            if df is not None and len(df) > 0:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –±–∞—Ä–æ–≤ –∑–∞ {elapsed:.1f} —Å–µ–∫")
                print(f"      –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.5f}")
                print(f"      –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ä–∞: {df.index[-1]}")
                results.append(True)
            else:
                print(f"   ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π DataFrame")
                results.append(False)

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            results.append(False)

    # 3. –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
    print("\n3Ô∏è‚É£ –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò (—Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è < 10 —Å–µ–∫):")

    try:
        print("   –ò–∑–º–µ—Ä—è—é —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ EURUSD 1m...")
        times = []

        for i in range(3):
            start = datetime.now()
            df = await fetch_po_ohlc_async("EURUSD", "1m", False)
            elapsed = (datetime.now() - start).total_seconds()
            times.append(elapsed)
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {elapsed:.1f} —Å–µ–∫")

        avg_time = sum(times) / len(times)

        print(f"\n   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f} —Å–µ–∫")
        if avg_time < 10:
            print("   ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã!")
        else:
            print("   ‚ö†Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π (>10 —Å–µ–∫)")
            print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∫—Å–∏ –±–ª–∏–∂–µ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            print("   - –£–º–µ–Ω—å—à–∏—Ç–µ PO_WAIT_EXTRA_MS")
            print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chromium –≤–º–µ—Å—Ç–æ firefox")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: {e}")

    # 4. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")

    success_rate = sum(results) / len(results) * 100 if results else 0

    if success_rate >= 66:
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.0f}%")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
        print("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ç–∞–π–º–∞—É—Ç—ã –≤ config.py")
        print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤")
        return True
    else:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º! –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.0f}%")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞")
        print("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∞–π—Ç–∞ PocketOption")
        print("‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏")
        print("‚Ä¢ –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–π–º–∞—É—Ç—ã")
        print("\n–†–µ—à–µ–Ω–∏—è:")
        print("‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏")
        print("‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ PO_NAV_TIMEOUT_MS –∏ PO_IDLE_TIMEOUT_MS")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pocketoption.com")
        return False

async def test_fast_mode():
    """–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    print("\n" + "="*60)
    print("‚ö° –¢–ï–°–¢ –ë–´–°–¢–†–û–ì–û –†–ï–ñ–ò–ú–ê")
    print("="*60)

    try:
        from app.analysis.fast_prediction import fast_predictor

        print("\n1. –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
        df = await fetch_po_ohlc_async("EURUSD", "1m", False)

        if df is None or len(df) == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –±–∞—Ä–æ–≤")

        print("\n2. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑...")
        start = datetime.now()

        prediction_text, prediction_data = await fast_predictor.get_fast_prediction(
            pair="EUR/USD",
            timeframe="1m",
            df=df,
            mode="ind"
        )

        elapsed = (datetime.now() - start).total_seconds()

        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {elapsed:.1f} —Å–µ–∫")
        print("\n–ü–†–û–ì–ù–û–ó:")
        print("-"*40)
        print(prediction_text[:500])  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        print("-"*40)

        if elapsed < 5:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!")
        elif elapsed < 10:
            print("‚úÖ –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!")
        else:
            print("‚ö†Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")

    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å fast_prediction –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/analysis/fast_prediction.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# NEW: —Ç–µ—Å—Ç –¥–ª—è CompositeFetcher
async def test_real_fetch():  # NEW
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–µ—Ç—á–∞ —á–µ—Ä–µ–∑ CompositeFetcher"""  # NEW
    print("\n" + "="*60)  # NEW
    print("üîÑ –¢–ï–°–¢ CompositeFetcher")  # NEW
    print("="*60)  # NEW

    cf = CompositeFetcher()  # NEW
    try:  # NEW
        df = await cf.fetch("EURUSD", "1m", False)  # NEW
        if df is not None:  # NEW
            print(f"Bars: {len(df)}, Columns: {df.columns.tolist()}")  # NEW
        else:  # NEW
            print("CompositeFetcher returned None or empty DataFrame")  # NEW
    except Exception as e:  # NEW
        print(f"Error during CompositeFetcher test: {e}")  # NEW

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ PocketOption...")
    print(f"–í—Ä–µ–º—è: {datetime.now()}")

    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    loop = asyncio.get_event_loop()
    result = loop.run_until_complete(test_pocketoption_connection())

    # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if result:
        loop.run_until_complete(test_fast_mode())

    # NEW: —Ç–µ—Å—Ç CompositeFetcher
    loop.run_until_complete(test_real_fetch())  # NEW

    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
