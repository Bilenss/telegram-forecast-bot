# app/keyboards_inline.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Iterable, Mapping, List, Union

def mode_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(text="üìà Technical Analysis", callback_data="mode:ta"),
        InlineKeyboardButton(text="üìä Indicators",         callback_data="mode:ind"),
    )
    return kb

def category_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(text="‚úÖ ACTIVE FIN", callback_data="category:fin"),
        InlineKeyboardButton(text="üõ† OTC",        callback_data="category:otc"),
    )
    return kb

def pairs_kb(pairs: Union[Iterable[str], Mapping[str, dict]]) -> InlineKeyboardMarkup:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –ø–∞—Ä—ã –ø–æ 3 –≤ —Ä—è–¥.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
      - —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫: ["EURUSD","GBPUSD",...]
      - dict: {"EURUSD": {"po": "EURUSD"}, ...} ‚Äî –±–µ—Ä—ë–º –ö–õ–Æ–ß –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    –í callback_data –ø–µ—Ä–µ–¥–∞—ë–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è: 'pair:EURUSD'
    """
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Å–ø–∏—Å–∫—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∏–º—ë–Ω
    if isinstance(pairs, dict):
        names: List[str] = list(pairs.keys())
    else:
        names = list(pairs)

    kb = InlineKeyboardMarkup(row_width=3)
    buttons: List[InlineKeyboardButton] = []
    for name in names:
        text = name if len(name) <= 30 else (name[:27] + "‚Ä¶")
        buttons.append(InlineKeyboardButton(text=text, callback_data=f"pair:{name}"))

    # –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 3):
        kb.row(*buttons[i:i+3])

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤ main.py –Ω–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ back:*, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'restart' –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
    kb.add(InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="restart"))
    return kb

def timeframe_kb(category: str) -> InlineKeyboardMarkup:
    """
    –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç –≤–∞—à —Ñ–µ—Ç—á–µ—Ä: 1m/5m/15m/30m/1h/4h.
    –î–ª—è fin —É–±–∏—Ä–∞–µ–º —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–∫—É–Ω–¥—ã.
    """
    # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä
    all_tfs = ["1m", "2m", "3m", "5m", "10m", "15m", "30m", "1h", "4h"]
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å fin/otc
    if category == "fin":
        # –æ–±—ã—á–Ω–æ –±–µ–∑ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö "2m/3m", –Ω–æ –æ—Å—Ç–∞–≤–∏–º –≥–∏–±–∫–æ—Å—Ç—å
        pass

    kb = InlineKeyboardMarkup(row_width=4)
    buttons = [InlineKeyboardButton(text=tf.upper(), callback_data=f"timeframe:{tf}") for tf in all_tfs]

    # –ø–æ 4 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 4):
        kb.row(*buttons[i:i+4])

    kb.add(
        InlineKeyboardButton(text="üîÑ New",   callback_data="restart"),
        InlineKeyboardButton(text="üèÅ Start", callback_data="restart"),
    )
    return kb
