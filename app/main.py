import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from .config import TELEGRAM_TOKEN, DEFAULT_LANG, CACHE_TTL_SECONDS, PO_ENABLE_SCRAPE, LOG_LEVEL
from .states import ForecastStates as ST
from .keyboards import lang_keyboard, mode_keyboard, category_keyboard, pairs_keyboard, timeframe_keyboard
from .utils.cache import TTLCache
from .utils.logging import setup
from .pairs import all_pairs
from .analysis.indicators import compute_indicators
from .analysis.decision import signal_from_indicators, simple_ta_signal
from .data_sources.pocketoption_scraper import fetch_po_ohlc
from .data_sources.fallback_quotes import fetch_public_ohlc

logger = setup(LOG_LEVEL)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
cache = TTLCache(ttl_seconds=CACHE_TTL_SECONDS)

INTRO_RU = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫."
INTRO_EN = "Hello! I am a forecasts bot. Choose language."

@dp.message_handler(commands=['start'])
async def cmd_start(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer(INTRO_RU if DEFAULT_LANG == 'ru' else INTRO_EN, reply_markup=lang_keyboard())
    await ST.Language.set()

@dp.message_handler(lambda m: m.text in ["RU", "EN"], state=ST.Language)
async def lang_selected(m: types.Message, state: FSMContext):
    lang = 'ru' if m.text == "RU" else 'en'
    await state.update_data(lang=lang)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞:" if lang == 'ru' else "Choose analysis mode:"
    await m.answer(text, reply_markup=mode_keyboard(lang))
    await ST.Mode.set()

@dp.message_handler(lambda m: m.text in ["üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", "üìä Technical analysis", "üìà Indicators"], state=ST.Mode)
async def mode_selected(m: types.Message, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    mode = "ta" if "–¢–µ—Ö–Ω–∏—á–µ—Å" in m.text or "Technical" in m.text else "ind"
    await state.update_data(mode=mode)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞:" if lang == 'ru' else "Choose asset category:"
    await m.answer(text, reply_markup=category_keyboard(lang))
    await ST.Category.set()

@dp.message_handler(lambda m: m.text in ["üí∞ ACTIVE FIN", "‚è±Ô∏è ACTIVE OTC"], state=ST.Category)
async def category_selected(m: types.Message, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    category = "fin" if "FIN" in m.text else "otc"
    await state.update_data(category=category)
    pairs = all_pairs(category)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:" if lang == 'ru' else "Choose a pair:"
    await m.answer(text, reply_markup=pairs_keyboard(pairs))
    await ST.Pair.set()

@dp.message_handler(state=ST.Pair)
async def pair_selected(m: types.Message, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    category = (await state.get_data()).get("category", "fin")
    pairs = all_pairs(category)
    if m.text not in pairs:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã." if lang == 'ru' else "Please use the keyboard.")
        return
    await state.update_data(pair=m.text)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:" if lang == 'ru' else "Select timeframe:"
    await m.answer(text, reply_markup=timeframe_keyboard(lang, po_available=bool(PO_ENABLE_SCRAPE)))
    await ST.Timeframe.set()

# OTC —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ PO, —Ñ–æ–ª–±—ç–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è FIN
def _fetch_ohlc(pair_info: dict, timeframe: str):
    cache_key = f"{pair_info['po']}:{timeframe}"
    df = cache.get(cache_key)
    if df is not None:
        return df

    is_otc = bool(pair_info.get("otc", False))

    # 1) OTC: —Ç–æ–ª—å–∫–æ PocketOption, –±–µ–∑ —Ñ–æ–ª–±—ç–∫–∞
    if is_otc:
        if not PO_ENABLE_SCRAPE:
            raise RuntimeError("OTC requires PocketOption scraping (PO_ENABLE_SCRAPE=1)")
        df = fetch_po_ohlc(pair_info['po'], timeframe=timeframe, otc=True)
        cache.set(cache_key, df)
        return df

    # 2) FIN: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º PO, –∑–∞—Ç–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    if PO_ENABLE_SCRAPE:
        try:
            df = fetch_po_ohlc(pair_info['po'], timeframe=timeframe, otc=False)
            cache.set(cache_key, df)
            return df
        except Exception as e:
            logger.debug(f"PO scraping failed: {e}")

    df = fetch_public_ohlc(pair_info['yf'], timeframe=timeframe)
    cache.set(cache_key, df)
    return df

@dp.message_handler(state=ST.Timeframe)
async def timeframe_selected(m: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    category = data.get("category", "fin")
    mode = data.get("mode", "ind")
    pair_name = data.get("pair")
    pairs = all_pairs(category)
    info = pairs[pair_name]
    timeframe = m.text.strip()

    await m.answer("–ì–æ—Ç–æ–≤–ª—é –¥–∞–Ω–Ω—ã–µ..." if lang == 'ru' else "Fetching data...")

    try:
        df = await asyncio.to_thread(_fetch_ohlc, info, timeframe)
    except Exception as e:
        if info.get("otc"):
            msg_ru = ("OTC-–ø–∞—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ PocketOption. "
                      "–°–µ–π—á–∞—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–ª–∏ –ø–æ–∑–∂–µ, "
                      "–ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üí∞ ACTIVE FIN.")
            msg_en = ("OTC pairs are available only on PocketOption. "
                      "Failed to fetch data now. Try another timeframe or later, "
                      "or choose üí∞ ACTIVE FIN.")
            await m.answer(msg_ru if lang == 'ru' else msg_en)
        else:
            await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Å–µ–π—á–∞—Å." if lang == 'ru' else "Failed to fetch quotes right now.")
        await state.finish()
        return

    if mode == "ind":
        ind = compute_indicators(df)
        action, notes = signal_from_indicators(df, ind)
    else:
        action, notes = simple_ta_signal(df)
        ind = {}

    # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç: –ø—Ä–æ–≥–Ω–æ–∑ + —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
    if lang == "ru":
        lines = [f"üëâ –ü—Ä–æ–≥–Ω–æ–∑: <b>{action}</b>"]
        if ind:
            lines.append("üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: " + ", ".join([f"RSI={ind['RSI']}", f"EMA9={ind['EMA_fast']}", f"EMA21={ind['EMA_slow']}"]))
        if notes:
            lines.append("‚ÑπÔ∏è " + "; ".join(notes))
        text = "\n".join(lines)
    else:
        lines = [f"üëâ Forecast: <b>{action}</b>"]
        if ind:
            lines.append("üìà Indicators: " + ", ".join([f"RSI={ind['RSI']}", f"EMA9={ind['EMA_fast']}", f"EMA21={ind['EMA_slow']}"]))
        if notes:
            lines.append("‚ÑπÔ∏è " + "; ".join(notes))
        text = "\n".join(lines)

    await m.answer(text, parse_mode="HTML")
    await state.finish()

def main():
    if not TELEGRAM_TOKEN:
        raise SystemExit("TELEGRAM_TOKEN env var is required")
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()
